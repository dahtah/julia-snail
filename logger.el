(defun get-create-log-buffer ()
  (progn 
    (if (not (get-buffer "*julia logs*"))
        (with-current-buffer (get-buffer-create "*julia logs*")
          (org-mode)
          (julia-snail-plot-mode)
          )
      )
    (get-buffer "*julia logs*"))
  )

(defun is-png-string (str)
  (if (< (length str) 4)
      nil
    (string-equal (substring msg 1 4) "PNG")))

(defun julia-snail--log-message (level msg)
  (with-current-buffer (get-create-log-buffer)
    (goto-char (point-max))
    (setq msg (base64-decode-string msg))
    (if (is-png-string msg)
        (let ((img (create-image msg nil t)))
          (insert-image img "julia plot")
          (insert "\n")
          )
      (cond ((string-equal level "Warn")
             (insert (propertize (concat "Warning: " msg) 'font-lock-face 'org-priority)))
            ((string-equal level "Warn")
             (insert (propertize (concat "Warning: " msg) 'font-lock-face 'org-warning)))
            (t (insert msg)))
      (insert "\n")
      )))


(defun julia-snail--log-text (txt)
  (with-current-buffer (get-create-log-buffer)
    (goto-char (point-max))
    (insert txt)
    (julia-snail-plot-mode)
    ))

(with-current-buffer (get-buffer-create "*scratch*")
(insert (propertize "blah" 'font-lock-face 'org-warning)))
